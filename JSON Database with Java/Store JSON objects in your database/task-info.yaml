type: edu
files:
  - name: src/client/Main.java
    visible: true
    text: |
      package client;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: src/server/Main.java
    visible: true
    text: |
      package server;
      
      public class Main {
      
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: test/JsonDatabaseTest.java
    visible: false
    text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.DynamicTest;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTest(order = 1)\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        TestedProgram client\
    \ = getClient();\n        client.start(\"-t\", \"exit\");\n\n        try {\n \
    \           Thread.sleep(100);\n        } catch (InterruptedException e) {\n \
    \           e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order\
    \ = 2)\n    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTest(order = 3)\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        try {\n\
    \            Thread.sleep(100);\n        } catch (InterruptedException e) {\n\
    \            e.printStackTrace();\n        }\n\n        TestedProgram client;\n\
    \        String output;\n\n        String requestJson;\n        String responseJson;\n\
    \        \n        client = getClient();\n        output = client.start(\"-t\"\
    , \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"set\")\n                .value(\"key\", \"\
    1\")\n                .value(\"value\", \"Hello world!\")\n            );\n  \
    \      responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    response\", OK_STATUS)\n            );\n\n        // Files\n        client = getClient();\n\
    \        output = client.start(\"-in\", \"setFile.json\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    key\", \"person\")\n                .value(\"value\", isObject()\n           \
    \         .value(\"name\", \"Elon Musk\")\n                    .value(\"car\"\
    , isObject()\n                        .value(\"model\", \"Tesla Roadster\")\n\
    \                        .anyOtherValues()\n                    )\n          \
    \          .anyOtherValues()\n                )\n                .anyOtherValues()\n\
    \            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(\"\
    client\");\n    }\n\n    private static TestedProgram getServer() {\n        return\
    \ new TestedProgram(\"server\");\n    }\n\n    private static int getThreadCount()\
    \ {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: test/JsonRequestBuilder.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      
      class JsonBuilder {
      
          private final Gson gson = new Gson();
          private final JsonObject jsonObject = new JsonObject();
      
          private JsonBuilder() {
      
          }
      
          public static JsonBuilder newBuilder() {
              return new JsonBuilder();
          }
      
          public JsonBuilder addValue(String key, String value) {
              jsonObject.addProperty(key, value);
              return this;
          }
      
          public JsonBuilder addValue(String key, JsonElement value) {
              jsonObject.add(key, value);
              return this;
          }
      
          public JsonBuilder addJsonObject(String key, JsonObject object) {
              jsonObject.add(key, object);
              return this;
          }
      
          public String getAsString() {
              return jsonObject.toString();
          }
      
          public JsonObject getAsJsonObject() {
              return jsonObject;
          }
      }
    learner_created: false
  - name: src/server/data/testDelete.json
    visible: true
    text: "{\"type\":\"delete\",\"key\":\"name\"}"
    learner_created: true
  - name: src/server/exceptions/NoSuchKeyException.java
    visible: true
    text: |+
      package server.exceptions;
      
      public class NoSuchKeyException extends RuntimeException{
          public NoSuchKeyException() {
              super("No such key");
          }
      }
    
    learner_created: true
  - name: src/server/cli/commands/Command.java
    visible: true
    text: |+
      package server.cli.commands;
      
      public interface Command {
          void execute();
      }
    
    learner_created: true
  - name: src/client/data/testGet.json
    visible: true
    text: "{\"type\":\"get\",\"key\":\"name\"}"
    learner_created: true
  - name: src/server/cli/commands/SetCommand.java
    visible: true
    text: |+
      package server.cli.commands;
      
      //import com.fasterxml.jackson.databind.ObjectMapper;
      import org.json.simple.*;
      //import org.json.JSONException;
      import org.json.simple.JSONArray;
      import org.json.simple.JSONObject;
      import org.json.simple.parser.JSONParser;
      import org.json.simple.parser.ParseException;
      import server.database.Database;
      
      import java.io.FileNotFoundException;
      import java.io.FileReader;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      
      
      public class SetCommand implements Command {
      
          private final String key;
          private final String value;
          private static FileWriter file;
          private JSONArray datalist;
      
          public SetCommand(String key, String value, JSONArray datalist) {
              this.key = key;
              this.value = value;
              this.datalist = datalist;
          }
      
          @Override
          public void execute() {
      
              boolean iskeyinarray = false;
      
              JSONArray listofvalues = new JSONArray();
      
              //try (FileReader reader = new FileReader("./src/server/data/")){
              try (FileReader reader = new FileReader("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json")) {
                  JSONParser jsonParser = new JSONParser();
                  Object obj = jsonParser.parse(reader);
                  if (obj.toString().isEmpty()) {
                      listofvalues = (JSONArray) obj;   //Array of json items
      
                      //Тут мы заменяем (обновляем) значение по ключу, если таковой присутствует в массиве
                      for (int i=0; i < listofvalues.size(); i++){
                          JSONObject itemArr = (JSONObject) listofvalues.get(i);
                          if(itemArr.get("key").toString().equals(key)) {
                              itemArr.put("value", value);
                              iskeyinarray = true;
                          }
                      }
                  }
                  else {
                      JSONObject information = new JSONObject();
                      information.put("key", key);
                      information.put("value", value);
                      listofvalues.add(information);
                  }
              }
              catch (ParseException | IOException e) {
                  e.printStackTrace();
              }
      
              /*
              if (!iskeyinarray) {
                  JSONObject information = new JSONObject();
                  information.put("key", key);
                  information.put("value", value);
                  listofvalues.add(information);
              }
              */
      
              try{
                  file = new FileWriter("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json");
                  //file = new FileWriter("./src/server/data/");
                  JSONArray.writeJSONString(listofvalues, file);
                  //file.write(listofvalues.toJSONString());
              }
              catch (IOException e) {
                  e.printStackTrace();
              }
              finally {
                  try {
                      file.flush();
                      file.close();
                  } catch (IOException e) {
                      e.printStackTrace();
                  }
              }
          }
      }
    
    learner_created: true
  - name: src/server/cli/requests/Response.java
    visible: true
    text: |+
      package server.cli.requests;
      
      import com.google.gson.Gson;
      
      import java.util.LinkedHashMap;
      import java.util.Map;
      
      public class Response {
      
          public static final String STATUS_OK = "OK";
          public static final String STATUS_ERROR = "ERROR";
      
      
          private String response;
          private String reason;
          private String value;
      
      
          public String getResponse() {
              return response;
          }
      
          public void setResponse(String response) {
              this.response = response;
          }
      
          public String getReason() {
              return reason;
          }
      
          public void setReason(String reason) {
              this.reason = reason;
          }
      
          public String getValue() {
              return value;
          }
      
          public void setValue(String value) {
              this.value = value;
          }
      
          public String toJSON() {
              Map<String, String> map = new LinkedHashMap<>();
              map.put("response", response);
              if (value != null) {
                  map.put("value", value);
              }
              if (reason != null) {
                  map.put("reason", reason);
              }
              return new Gson().toJson(map);
          }
      }
    
    learner_created: true
  - name: src/server/database/Database.java
    visible: true
    text: |+
      package server.database;
      
      import server.exceptions.NoSuchKeyException;
      
      import java.util.HashMap;
      import java.util.Map;
      
      public enum Database {
          INSTANCE;
      
          private final Map<String, String> database;
      
          Database() {
              database = new HashMap<>();
          }
      
          public void set(String key, String value) {
              database.put(key, value);
          }
      
          public String get(String key) {
              if (database.containsKey(key)) {
                  return database.get(key);
              }
              throw new NoSuchKeyException();
          }
      
          public void delete(String key) {
              if (!database.containsKey(key)) {
                  throw new NoSuchKeyException();
              }
              database.remove(key);
          }
      }
    
    learner_created: true
  - name: src/server/exceptions/FileIsNotFoundException.java
    visible: true
    text: |+
      package server.exceptions;
      
      public class FileIsNotFoundException extends RuntimeException{
          public FileIsNotFoundException() {
              super("No such file");
          }
      }
    
    learner_created: true
  - name: src/server/cli/commands/GetCommand.java
    visible: true
    text: |+
      package server.cli.commands;
      
      import com.google.gson.JsonArray;
      import com.google.gson.JsonObject;
      import org.json.simple.JSONArray;
      import org.json.simple.JSONObject;
      
      import org.json.simple.parser.JSONParser;
      import org.json.simple.parser.ParseException;
      import server.database.Database;
      import server.exceptions.FileIsEmptyException;
      import server.exceptions.FileIsNotFoundException;
      import server.exceptions.NoSuchKeyException;
      
      import java.io.FileNotFoundException;
      import java.io.FileReader;
      import java.io.IOException;
      import java.util.List;
      import java.util.Map;
      import java.util.stream.Collectors;
      import java.util.stream.IntStream;
      import java.util.stream.Stream;
      
      
      public class GetCommand implements Command {
      
          private final String key;
          private String result;
      
          public GetCommand(String key) {
              this.key = key;
          }
      
          public final String getResult() {
              return result;
          }
      
          @Override
          public void execute() {
              //result = Database.INSTANCE.get(key);
              /*
              if (database.containsKey(key)) {
                  return database.get(key);
              }
              throw new NoSuchKeyException();
              */
      
              //JSON parser object to parse read file
              JSONParser jsonParser = new JSONParser();
      
              //try (FileReader reader = new FileReader("./src/server/data/"))
              try (FileReader reader = new FileReader("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json"))
              {
                  Object obj = jsonParser.parse(reader);   //Read JSON file
                  try{
                      JSONArray listofvalues = (JSONArray) obj;
      
                      for (int i = 0; i < listofvalues.size(); i++) {
                          JSONObject tempobj = (JSONObject) listofvalues.get(i);
                          if (tempobj.get("key").equals(key)){
                              //result = tempobj.toJSONString();
                              result = (String) tempobj.get("value");
                          }
                      }
                  }
                  catch (Exception e) {
                      throw new NoSuchKeyException();
                  }
                  if (result == null) {
                      throw new NoSuchKeyException();
                  }
              }
      
              catch (FileNotFoundException e) {
                  throw new NoSuchKeyException();
              }
              catch (IOException | ParseException e) {
                  e.printStackTrace();
              }
          }
      
      }
    
    learner_created: true
  - name: src/server/cli/commands/DeleteCommand.java
    visible: true
    text: |+
      package server.cli.commands;
      
      import org.json.simple.JSONArray;
      import org.json.simple.JSONObject;
      import org.json.simple.parser.JSONParser;
      import org.json.simple.parser.ParseException;
      import server.database.Database;
      import server.exceptions.NoSuchKeyException;
      
      import java.io.FileNotFoundException;
      import java.io.FileReader;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.util.ArrayList;
      
      
      public class DeleteCommand implements Command {
      
          private final String key;
          private static FileWriter file;
      
          public DeleteCommand(String key) {
              this.key = key;
          }
          @Override
          public void execute() {
      
              JSONArray listofvalues = new JSONArray();
              Integer position = null;
              boolean elementexeists = false;
      
              //try (FileReader reader = new FileReader("./src/server/data/")){
              try (FileReader reader = new FileReader("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json")) {
                  JSONParser jsonParser = new JSONParser();
                  Object obj = jsonParser.parse(reader);
                  listofvalues = (JSONArray) obj;   //Array of json items
              }
              catch (FileNotFoundException e) {
                  e.printStackTrace();
              } catch (IOException e) {
                  e.printStackTrace();
              } catch (ParseException e) {
                  throw new RuntimeException(e);
              }
      
              for (int i=0; i < listofvalues.size(); i++){
                  JSONObject itemArr = (JSONObject) listofvalues.get(i);
                  if(itemArr.get("key").toString().equals(key)) {
                      position = i;
                  }
              }
      
              JSONArray list = new JSONArray();
              int len = listofvalues.size();
              if (position != null) {
                  for (int i=0;i<len;i++) {
                      if (i != position)
                      {
                          list.add(listofvalues.get(i));
                      }
                  }
              }
              else
              {
                  throw new NoSuchKeyException();
              }
      
      
              try{
                  file = new FileWriter("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/db.json");
                  file.write(list.toJSONString());
              }
              catch (IOException e) {
                  e.printStackTrace();
              }
              finally {
                  try {
                      file.flush();
                      file.close();
                  } catch (IOException e) {
                      e.printStackTrace();
                  }
              }
          }
      }
    
    learner_created: true
  - name: src/server/data/testSet.json
    visible: true
    text: "{\"type\":\"set\",\"key\":\"name\",\"value\":\"Kate\"}"
    learner_created: true
  - name: src/server/cli/CommandExecutor.java
    visible: true
    text: |+
      package server.cli;
      
      import server.cli.commands.Command;
      
      public class CommandExecutor {
          public void executeCommand(Command command) {
              command.execute();
          }
      }
    
    
    learner_created: true
  - name: src/server/exceptions/NoSuchRequestException.java
    visible: true
    text: |+
      package server.exceptions;
      
      public class NoSuchRequestException extends RuntimeException{
          public NoSuchRequestException() {
              super("Bad request");
          }
      }
    
    learner_created: true
  - name: src/server/data/testGet.json
    visible: true
    text: "{\"type\":\"get\",\"key\":\"name\"}"
    learner_created: true
  - name: src/client/data/testSet.json
    visible: true
    text: "{\"type\":\"set\",\"key\":\"name\",\"value\":\"Kate\"}"
    learner_created: true
  - name: src/client/data/testDelete.json
    visible: true
    text: "{\"type\":\"delete\",\"key\":\"name\"}"
    learner_created: true
  - name: src/server/cli/requests/Request.java
    visible: true
    text: |+
      package server.cli.requests;
      
      import com.beust.jcommander.Parameter;
      import com.google.gson.Gson;
      
      import java.io.*;
      import java.nio.file.Files;
      import java.nio.file.Paths;
      import java.util.LinkedHashMap;
      import java.util.Map;
      
      public class Request {
      
          /*
          private static final Path DATA_DIR_PATH = Paths.get(
                  "src" + File.separator +
                          "client" + File.separator +
                          "data").toAbsolutePath();
          */
      
          @Parameter(names = {"-t", "--type"}, description = "The type of the request")
          private String type;
      
          @Parameter(names = {"-k", "--key"}, description = "The Record key")
          private String key;
      
          @Parameter(names = {"-v", "--value"}, description = "The text value to add")
          private String value;
      
          //Название файла для чтения
          @Parameter(names = {"-in", "--commandfromfile"}, description = "The text with commands from file")
          private String commandfromfile;
      
      
          public String getType() {
              return type;
          }
      
          public void setType(String type) {
              this.type = type;
          }
      
          public String getKey() {
              return key;
          }
      
          public void setKey(String key) {
              this.key = key;
          }
      
          public String getValue() {
              return value;
          }
      
          public void setValue(String value) {
              this.value = value;
          }
      
          public String getCommandfromfile() {
              return commandfromfile;
          }
      
          public void setCommandfromfile(String commandfromfile) {
              this.commandfromfile = commandfromfile;
          }
      
          /*
          public String toJSON() {
              Map<String, String> map = new LinkedHashMap<>();
              map.put("type", type);
              if (key != null) {
                  map.put("key", key);
              }
              if (value != null) {
                  map.put("value", value);
              }
              return new Gson().toJson(map);
          }
          */
      
          private String readFromFile(String path) throws IOException {
              return new String(Files.readAllBytes(Paths.get(path)));
          }
      
          public String toJson() {
              if (commandfromfile != null) {
                  try {
                      return readFromFile("/Users/abarnawal/Java Intellijec Projects/JSON Database with Java/JSON Database with Java/task/src/server/data/" + commandfromfile);
                  } catch (IOException e) {
                      System.out.println("Cannot read file: " + e.getMessage());
                      System.exit(1);
                  }
              }
      
              Map<String, String> map = new LinkedHashMap<>();
              map.put("type", type);
              map.put("key",key);
              map.put("value",value);
              return new Gson().toJson(map); //{type type, key key, value value}
          }
      }
    
    learner_created: true
  - name: src/server/exceptions/FileIsEmptyException.java
    visible: true
    text: |
      package server.exceptions;
      
      public class FileIsEmptyException extends RuntimeException {
          public FileIsEmptyException() {
              super("No data in a file");
          }
      }
    learner_created: true
  - name: src/server/data/db.json
    visible: true
    text: "[]"
    learner_created: true
  - name: src/server/cli/CommandLineArgs.java
    visible: true
    learner_created: true
  - name: src/server/data/data.json
    visible: true
    learner_created: true
  - name: src/server/data/deleteFile.json
    visible: true
    learner_created: true
  - name: src/server/data/getFile.json
    visible: true
    learner_created: true
  - name: src/server/data/secondGetFile.json
    visible: true
    learner_created: true
  - name: src/server/data/setFile.json
    visible: true
    learner_created: true
  - name: src/server/data/updateFile.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5495#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 09 Mar 2024 06:23:51 UTC"
record: 6
